using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using Abstracta.JmeterDsl.Core.Bridge;
using Abstracta.JmeterDsl.Core.Samplers;

namespace Abstracta.JmeterDsl.Http
{
    /// <summary>
    /// Allows to configure a JMeter HTTP sampler to make HTTP requests in a test plan.
    /// </summary>
    public class DslHttpSampler : BaseSampler<DslHttpSampler>
    {
        private readonly string _url;
        private readonly List<HttpSamplerProperty> __propsList = new List<HttpSamplerProperty>();
        private string _method;
        private string _body;
        private bool _followRedirects;

        public DslHttpSampler(string name, string url)
            : base(name)
        {
            _url = url;
            _followRedirects = true;
        }

        /// <summary>
        /// Specifies that the sampler should send an HTTP POST to defined URL.
        /// </summary>
        /// <param name="body">to include in HTTP POST request body.</param>
        /// <param name="contentType">to be sent as Content-Type header in HTTP POST request.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler Post(string body, MediaTypeHeaderValue contentType) =>
            Method(HttpMethod.Post.Method)
                .ContentType(contentType)
                .Body(body);

        /// <summary>
        /// Specifies the HTTP method to be used in the HTTP request generated by the sampler.
        /// </summary>
        /// <param name="method">is the HTTP method to be used by the sampler.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler Method(string method)
        {
            _method = method;
            return this;
        }

        /// <summary>
        /// Specifies the body to be sent in the HTTP request generated by the sampler.
        /// </summary>
        /// <param name="body">to be used as in the body of the HTTP request.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler Body(string body)
        {
            _body = body;
            return this;
        }

        /// <summary>
        /// Allows to easily specify the Content-Type HTTP header to be used by the sampler.
        /// </summary>
        /// <param name="contentType">value to send as Content-Type header.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler ContentType(MediaTypeHeaderValue contentType)
        {
            FindHeaders().ContentType(contentType);
            return this;
        }

        /// <summary>
        /// Specifies a file to be sent as body of the request.
        /// <br/>
        /// This method is useful to send binary data in request (eg: uploading an image to a server).
        /// </summary>
        /// <param name="filePath">is path to the file to be sent as request body.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler BodyFile(string filePath)
        {
            __propsList.Add(new DslBodyFile(filePath));
            return this;
        }

        /// <summary>
        /// Allows specifying a query parameter or url encoded form body parameter.
        /// <br/>
        /// JMeter will automatically URL encode provided parameters names and values. Use
        /// <see cref="RawParam(string, string)"/> to send parameters values which are already encoded and
        /// should be sent as is by JMeter.
        /// <br/>
        /// JMeter will use provided parameter in query string if method is GET, DELETE or OPTIONS,
        /// otherwise it will use them in url encoded form body.
        /// <br/>
        /// If you set a parameter with empty string name, it results in same behavior as using
        /// <see cref="Body(string)"/> method. In general, you either use body function or parameters
        /// functions, but don't use both of them in same sampler.
        /// </summary>
        /// <param name="name">specifies the name of the parameter.</param>
        /// <param name="value">specifies the value of the parameter to be URL encoded to include in URL</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler Param(string name, string value)
        {
            __propsList.Add(new DslParam(name, value));
            return this;
        }

        /// <summary>
        /// Same as <see cref="Param(string, string)"/> but param name and value will be sent with no additional
        /// encoding.
        /// </summary>
        /// <see cref="Param(string, string)"/>
        public DslHttpSampler RawParam(string name, string value)
        {
            __propsList.Add(new DslRawParam(name, value));
            return this;
        }

        /// <summary>
        /// Specifies a part of a multipart form body.
        /// <br/>
        /// In general, samplers should not use this method in combination with
        /// <see cref="Param(string, string)"/> or <see cref="RawParam(string, string)"/>.
        /// </summary>
        /// <param name="name">specifies the name of the part.</param>
        /// <param name="value">specifies the string to be sent in the part.</param>
        /// <param name="contentType">specifies the content-type associated to the part.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler BodyPart(string name, string value, MediaTypeHeaderValue contentType)
        {
            __propsList.Add(new DslBodyPart(name, value, contentType.ToString()));
            return this;
        }

        /// <summary>
        /// Specifies a file to be sent in a multipart form body.
        /// </summary>
        /// <param name="name">is the name to be assigned to the file part.</param>
        /// <param name="filePath">is path to the file to be sent in the multipart form body.</param>
        /// <param name="contentType">the content type associated to the part.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler BodyFilePart(string name, string filePath, MediaTypeHeaderValue contentType)
        {
            __propsList.Add(new DslBodyFilePart(name, filePath, contentType.ToString()));
            return this;
        }

        private HttpHeaders FindHeaders()
        {
            var ret = (from c in _children
                       where c is HttpHeaders
                       select (HttpHeaders)c).FirstOrDefault();
            if (ret == null)
            {
                ret = new HttpHeaders();
                _children.Add(ret);
            }
            return ret;
        }

        /// <summary>
        /// Specifies an HTTP header to be sent by the sampler.
        /// <br/>
        /// To specify multiple headers just invoke this method several times with the different header
        /// names and values.
        /// </summary>
        /// <param name="name">specifies name of the HTTP header.</param>
        /// <param name="value">specifies value of the HTTP header.</param>
        /// <returns>the sampler for further configuration or usage.</returns>
        public DslHttpSampler Header(string name, string value)
        {
            FindHeaders().Header(name, value);
            return this;
        }

        /// <summary>
        /// Allows enabling/disabling automatic request for redirects.
        /// <para>
        /// When a response is a redirection response (3xx status code with a Location header), the system
        /// automatically generates a new request to the redirected destination registering the redirect
        /// request as a sub sample. This method allows enabling/disabling such behavior.
        /// </para>
        /// </summary>
        /// <param name="followRedirects">Sets either to enable or disable automatic redirects. By default,
        /// redirects are automatically followed.</param>
        /// <returns>The sampler for further configuration or usage.</returns>
        public DslHttpSampler FollowRedirects(bool followRedirects)
        {
            _followRedirects = followRedirects;
            return this;
        }

        internal abstract class HttpSamplerProperty : IDslProperty
        {
            public void ShowInGui() => throw new NotImplementedException();
        }

        internal class DslBodyFile : HttpSamplerProperty
        {
            internal readonly string _filePath;

            public DslBodyFile(string filePath)
            {
                _filePath = filePath;
            }
        }

        internal class DslParam : HttpSamplerProperty
        {
            internal readonly string _name;
            internal readonly string _value;

            public DslParam(string name, string value)
            {
                _name = name;
                _value = value;
            }
        }

        internal class DslRawParam : DslParam
        {
            public DslRawParam(string name, string value)
                : base(name, value)
            {
            }
        }

        internal class DslBodyPart : DslParam
        {
            internal readonly string _contentType;

            public DslBodyPart(string name, string value, string contentType)
                : base(name, value)
            {
                _contentType = contentType;
            }
        }

        internal class DslBodyFilePart : HttpSamplerProperty
        {
            internal readonly string _name;
            internal readonly string _filePath;
            internal readonly string _contentType;

            public DslBodyFilePart(string name, string filePath, string contentType)
            {
                _name = name;
                _filePath = filePath;
                _contentType = contentType;
            }
        }
    }
}
